{"version":3,"sources":["../../app-es/services/NegociacaoService.js"],"names":["HttpService","ConnectionFactory","NegociacaoDao","Negociacao","NegociacaoService","_http","Promise","resolve","reject","get","then","negociacoes","map","Date","objeto","data","quantidade","valor","catch","console","log","erro","negociacao","getConnection","connection","dao","adiciona","Error","listaTodos","apagaTodos","listaAtual","cb","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","reduce","array1","array","concat","filter","some","JSON","stringify","nec"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["import {HttpService} from './HttpService';\r\nimport {ConnectionFactory} from './ConnectionFactory';\r\nimport {NegociacaoDao} from '../dao/NegociacaoDao';\r\nimport {Negociacao} from '../models/Negociacao';\r\n\r\nexport class NegociacaoService {\r\n\r\n    constructor() {\r\n        this._http = new HttpService();\r\n    }\r\n\r\n    obterNegociacoesDaSemana() {\r\n        return new Promise((resolve, reject) => {\r\n            this._http.get('negociacoes/semana')\r\n            .then(negociacoes => {\r\n                resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\r\n            }).catch(erro => {\r\n                console.log(erro);\r\n                reject('Não foi possível obter as negociações da semana');\r\n            });\r\n        });\r\n    }\r\n\r\n    obterNegociacoesDaSemanaAnterior() {\r\n        return new Promise((resolve, reject) => {\r\n            this._http.get('negociacoes/anterior')\r\n            .then(negociacoes => {\r\n                resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\r\n            }).catch(erro => {\r\n                console.log(erro);\r\n                reject('Não foi possível obter as negociações da semana');\r\n            });\r\n        });\r\n    }\r\n\r\n    obterNegociacoesDaSemanaRetrasada() {\r\n        return new Promise((resolve, reject) => {\r\n            this._http.get('negociacoes/retrasada')\r\n            .then(negociacoes => {\r\n                resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\r\n            }).catch(erro => {\r\n                console.log(erro);\r\n                reject('Não foi possível obter as negociações da semana');\r\n            });\r\n        });\r\n    }\r\n    \r\n    cadastra(negociacao) {\r\n        return ConnectionFactory\r\n        .getConnection()\r\n        .then(connection => new NegociacaoDao(connection))\r\n        .then(dao => dao.adiciona(negociacao))\r\n        .then(() => 'Negociação adicionada com sucesso')\r\n        .catch((erro) => {\r\n            throw new Error(erro);\r\n        });\r\n    }\r\n\r\n    lista() {\r\n        return ConnectionFactory\r\n        .getConnection()\r\n        .then(connection => new NegociacaoDao(connection))\r\n        .then(dao => dao.listaTodos())\r\n        .catch(erro => {\r\n            console.log(erro);\r\n            throw new Error('Não foi possível obter as negociações');\r\n        })\r\n    }\r\n\r\n    apaga() {\r\n        return ConnectionFactory\r\n        .getConnection()\r\n        .then(connection => new NegociacaoDao(connection))\r\n        .then(dao => dao.apagaTodos())\r\n        .then(() => 'Negociações apagadas com sucesso')\r\n        .catch(erro => {\r\n            console.log(erro);\r\n            throw new Error('Não foi possível obter as negociações')\r\n        });\r\n    }\r\n\r\n    importa(listaAtual, cb) {\r\n        Promise.all([this.obterNegociacoesDaSemana(), \r\n            this.obterNegociacoesDaSemanaAnterior(),\r\n            this.obterNegociacoesDaSemanaRetrasada()])\r\n        .then(negociacoes => {\r\n            cb(negociacoes.reduce((array1, array) => array1.concat(array), [])\r\n            .filter(negociacao => !listaAtual\r\n                .some(nec => JSON.stringify(nec) == JSON.stringify(negociacao))));\r\n        }).catch(erro => {\r\n            console.log(erro);\r\n            throw new Error('Não foi possível buscar negociação para importar');\r\n        });\r\n    }\r\n}"]}